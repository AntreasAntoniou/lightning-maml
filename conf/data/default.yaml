# @package _group_


# The module is communicating with pytorch-lightning
datamodule:
  _target_: pl.datamodule.MetaDataModule


  datasets:
    train:
      _target_: torchmeta.datasets.Omniglot
      root: ${env:DATASET_PATH}
      meta_train: True
      download: True

    val:
      _target_: torchmeta.datasets.Omniglot
      root: ${env:DATASET_PATH}
      meta_val: True
      download: True

    test:
      _target_: torchmeta.datasets.Omniglot
      root: ${env:DATASET_PATH}
      meta_test: True
      download: True

  # number of classes for each task
  nway: 5
  # number of inner steps for adaptation
  num_inner_steps: 1

  # input transformations
  transforms:
    - _target_: torchvision.transforms.Resize
      size: 28
    - _target_: torchvision.transforms.ToTensor


  target_transform:
    _target_: torchmeta.transforms.Categorical

  # this augmentation creates new classes based on rotation.
  class_augmentations:
    - _target_: common.transform.Rotation
      angle:
        - 90
        - 180
        - 270
  # number of tasks for each metadataset split
  batch_size:
    train: 20
    val: 20
    test: 20

  # number of samples per class for a task
  kshot:
    support: 5
    query: 5

  # number of workers to load data to reduce bottleneck
  num_workers:
    train: 2
    val: 2
    test: 2